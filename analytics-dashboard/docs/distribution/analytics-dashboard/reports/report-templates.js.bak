/**
 * Report Templates JavaScript Module
 * Contains predefined report templates and configurations
 */

console.log('Report Templates module loaded');

/**
 * Generate Weekly Performance Report PDF
 * @param {Array} data - Array of promotion data
 * @returns {jsPDF} - PDF document
 */
function generateWeeklyReport(data) {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    // Header
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Weekly Performance Report', 20, 20);

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 30);
    doc.text(`Period: Week 36 - Sep 18-24, 2025`, 20, 38);

    // Summary metrics
    const totalPromotions = data.length;
    const avgScore = Math.round(data.reduce((sum, item) => sum + item.composite_score, 0) / data.length);
    const totalViews = data.reduce((sum, item) => sum + item.card_in_view, 0);
    const totalClicks = data.reduce((sum, item) => sum + item.card_clicked, 0);
    const clickRate = totalClicks > 0 ? ((totalClicks / totalViews) * 100).toFixed(2) : 0;

    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Executive Summary', 20, 55);

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Total Promotions: ${totalPromotions}`, 20, 65);
    doc.text(`Average Performance Score: ${avgScore}`, 20, 72);
    doc.text(`Total Views: ${totalViews.toLocaleString()}`, 20, 79);
    doc.text(`Total Clicks: ${totalClicks.toLocaleString()}`, 20, 86);
    doc.text(`Click-Through Rate: ${clickRate}%`, 20, 93);

    // Top 10 Performers Table
    const top10 = data
        .sort((a, b) => b.composite_score - a.composite_score)
        .slice(0, 10);

    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Top 10 Performers', 20, 110);

    // Table headers
    const startY = 120;
    const colWidths = [10, 80, 30, 25, 25, 30];
    const colX = [20, 30, 110, 140, 165, 190];

    doc.setFontSize(9);
    doc.setFont('helvetica', 'bold');
    doc.text('#', colX[0], startY);
    doc.text('Promotion Name', colX[1], startY);
    doc.text('Department', colX[2], startY);
    doc.text('Views', colX[3], startY);
    doc.text('Clicks', colX[4], startY);
    doc.text('Score', colX[5], startY);

    // Draw header line
    doc.line(20, startY + 2, 210, startY + 2);

    // Table data
    doc.setFont('helvetica', 'normal');
    top10.forEach((item, index) => {
        const y = startY + 10 + (index * 8);

        // Check if we need a new page
        if (y > 270) {
            doc.addPage();
            return;
        }

        doc.text((index + 1).toString(), colX[0], y);

        // Truncate long names
        const name = item.card_name.length > 30 ?
            item.card_name.substring(0, 27) + '...' :
            item.card_name;
        doc.text(name, colX[1], y);

        doc.text(item.department || 'N/A', colX[2], y);
        doc.text(item.card_in_view.toString(), colX[3], y);
        doc.text(item.card_clicked.toString(), colX[4], y);
        doc.text(item.composite_score.toString(), colX[5], y);
    });

    // Footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.text('Generated by Analytics Dashboard', 20, pageHeight - 10);
    doc.text(`Generated on ${new Date().toLocaleString()}`, 150, pageHeight - 10);

    return doc;
}

/**
 * Generate Excel Report using SheetJS
 * @param {Array} data - Array of promotion data
 * @param {Object} options - Export options (filters, etc.)
 * @returns {Object} - Workbook object
 */
function generateExcelReport(data, options = {}) {
    console.log('Generating Excel report with', data.length, 'items');

    // Create a new workbook
    const wb = XLSX.utils.book_new();

    // Define headers for the promotions sheet
    const headers = [
        'ID',
        'Promotion Name',
        'Department',
        'Price',
        'Views',
        'Clicks',
        'CTR (%)',
        'Composite Score',
        'Percentile',
        'Quartile'
    ];

    // Prepare data rows
    const worksheetData = [headers];

    // Add data rows
    data.forEach(item => {
        const ctr = item.card_in_view > 0 ?
            ((item.card_clicked / item.card_in_view) * 100).toFixed(2) :
            '0.00';

        worksheetData.push([
            item.card_id || '',
            item.card_name || '',
            item.department || '',
            item.card_price || '',
            item.card_in_view || 0,
            item.card_clicked || 0,
            ctr,
            item.composite_score || 0,
            item.percentile || '',
            item.quartile || ''
        ]);
    });

    // Create worksheet from array
    const ws = XLSX.utils.aoa_to_sheet(worksheetData);

    // Auto-fit columns
    const colWidths = [];

    // Calculate column widths based on content
    worksheetData.forEach(row => {
        row.forEach((cell, index) => {
            const cellLength = cell ? cell.toString().length : 0;
            if (!colWidths[index] || colWidths[index] < cellLength) {
                colWidths[index] = Math.min(cellLength + 2, 50); // Max width of 50
            }
        });
    });

    // Apply column widths
    ws['!cols'] = colWidths.map(width => ({ width: width }));

    // Apply header styling
    const headerRange = XLSX.utils.decode_range(ws['!ref']);
    for (let col = headerRange.s.c; col <= headerRange.e.c; col++) {
        const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
        if (!ws[cellAddress]) continue;

        // Make headers bold (basic formatting)
        ws[cellAddress].s = {
            font: { bold: true },
            fill: { fgColor: { rgb: "E5E7EB" } },
            alignment: { horizontal: "center" }
        };
    }

    // Add autofilter to the data
    ws['!autofilter'] = { ref: ws['!ref'] };

    // Add the worksheet to workbook
    XLSX.utils.book_append_sheet(wb, ws, "Promotions");

    // Add summary sheet if requested
    if (options.includeSummary) {
        const summarySheet = createSummarySheet(data);
        XLSX.utils.book_append_sheet(wb, summarySheet, "Summary");
    }

    return wb;
}

/**
 * Create a summary worksheet
 * @param {Array} data - Array of promotion data
 * @returns {Object} - Worksheet object
 */
function createSummarySheet(data) {
    const totalPromotions = data.length;
    const avgScore = Math.round(data.reduce((sum, item) => sum + (item.composite_score || 0), 0) / data.length);
    const totalViews = data.reduce((sum, item) => sum + (item.card_in_view || 0), 0);
    const totalClicks = data.reduce((sum, item) => sum + (item.card_clicked || 0), 0);
    const clickRate = totalViews > 0 ? ((totalClicks / totalViews) * 100).toFixed(2) : '0.00';

    // Department breakdown
    const deptStats = {};
    data.forEach(item => {
        const dept = item.department || 'Unknown';
        if (!deptStats[dept]) {
            deptStats[dept] = { count: 0, totalScore: 0, totalViews: 0, totalClicks: 0 };
        }
        deptStats[dept].count++;
        deptStats[dept].totalScore += item.composite_score || 0;
        deptStats[dept].totalViews += item.card_in_view || 0;
        deptStats[dept].totalClicks += item.card_clicked || 0;
    });

    const summaryData = [
        ['Weekly Performance Summary'],
        ['Generated:', new Date().toLocaleString()],
        [''],
        ['Overall Metrics'],
        ['Total Promotions', totalPromotions],
        ['Average Performance Score', avgScore],
        ['Total Views', totalViews.toLocaleString()],
        ['Total Clicks', totalClicks.toLocaleString()],
        ['Click-Through Rate (%)', clickRate],
        [''],
        ['Department Breakdown'],
        ['Department', 'Count', 'Avg Score', 'Total Views', 'Total Clicks', 'CTR (%)']
    ];

    // Add department data
    Object.entries(deptStats).forEach(([dept, stats]) => {
        const avgDeptScore = Math.round(stats.totalScore / stats.count);
        const deptCTR = stats.totalViews > 0 ?
            ((stats.totalClicks / stats.totalViews) * 100).toFixed(2) :
            '0.00';

        summaryData.push([
            dept,
            stats.count,
            avgDeptScore,
            stats.totalViews,
            stats.totalClicks,
            deptCTR
        ]);
    });

    const ws = XLSX.utils.aoa_to_sheet(summaryData);

    // Auto-fit columns for summary
    const colWidths = [];
    summaryData.forEach(row => {
        row.forEach((cell, index) => {
            const cellLength = cell ? cell.toString().length : 0;
            if (!colWidths[index] || colWidths[index] < cellLength) {
                colWidths[index] = Math.min(cellLength + 2, 30);
            }
        });
    });

    ws['!cols'] = colWidths.map(width => ({ width: width }));

    return ws;
}